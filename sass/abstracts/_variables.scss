// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------

/// Regular font family
/// @type List
// $text-font-stack: "Open Sans", "Helvetica Neue Light", "Helvetica Neue",
//   "Helvetica", "Arial", sans-serif !default;

/// Code (monospace) font family
/// @type List
// $code-font-stack: "Courier New", "DejaVu Sans Mono", "Bitstream Vera Sans Mono",
//   "Monaco", monospace !default;

// Primary

$dark-blue: hsl(233, 26%, 24%);
$lime-green: hsl(136, 65%, 51%);
$bright-cyan: hsl(192, 70%, 51%);

// Neutral

$grayish-blue: hsl(233, 8%, 62%);
$light-grayish-blue: hsl(220, 16%, 96%);
$very-light-gray: hsl(0, 0%, 98%);
$white: hsl(0, 0%, 100%);

$max-width: 1150px !default;
$radius: 6px;
$transition: all ease 0.4s;

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
  "small": 320px,
  "medium": 800px,
  "large": 1024px,
) !default;

/// Mixin to manage responsive breakpoints
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
